
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author DELL
 */
public class Remitance extends javax.swing.JFrame {

    DefaultTableModel dm;
    Connection conn;
    ResultSet rs;
    PreparedStatement pst;

    /**
     * Creates new form Bank
     */
    public Remitance() {
        super("Bank");
        initComponents();
        conn = javaconnect.getConnection();
        fetch();
//        clock();
    }

    public void fetch() {
        try {
            JTableHeader header = table1.getTableHeader();
            header.setForeground(Color.red);
            header.setFont(new Font("Tahome", Font.ITALIC, 12));
            String q = "select DISTINCT id as Id,party_name as 'Party Name',totalsent as TotalSent,totalreceive as TotalReceive,total as 'Total' from remitparty  ORDER BY id DESC";
//            String q = "select item_date as Receiving_Date from item ORDER BY id DESC";
            pst = conn.prepareStatement(q);
            rs = pst.executeQuery();
            table1.setModel(DbUtils.resultSetToTableModel(rs));
            //increasing the width of columns
            TableColumnModel columnModel = table1.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(30);
//            columnModel.getColumn(1).setPreferredWidth(80);
        } catch (Exception e) {

        }
    }

    public void clear() {
        customer_name.setText("");
        ctrlnno.setText("");
        sender.setText("");
        receiver.setText("");
        sendamount.setText("");
        receiveamount.setText("");
//        customer_contact.setText("");
    }

    public void clock() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        date.setText(year + "-" + (month + 1) + "-" + day);
    }

    //search engine
    private void filter(String query) {
        dm = (DefaultTableModel) table1.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dm);
        table1.setRowSorter(tr);

        tr.setRowFilter(RowFilter.regexFilter(query));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        search_text = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        customer_name = new javax.swing.JTextField();
        ctrlnno = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        sender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        receiver = new javax.swing.JTextField();
        sendamount = new javax.swing.JTextField();
        receiveamount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Remittance");

        search_text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_textKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_textKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel12.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(search_text, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(search_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel4.setText("Party Name");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 110, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel5.setText("Date");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 110, 20));

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("Sitka Subheading", 3, 18)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 90, -1));

        customer_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customer_nameActionPerformed(evt);
            }
        });
        customer_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                customer_nameKeyTyped(evt);
            }
        });
        jPanel3.add(customer_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 160, -1));

        ctrlnno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlnnoActionPerformed(evt);
            }
        });
        jPanel3.add(ctrlnno, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 160, -1));

        jPanel4.setBackground(new java.awt.Color(231, 202, 231));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel2.setText("Add Remittance");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 200, -1));

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 360, 70));
        jPanel3.add(sender, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 160, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel6.setText("Ctrl No");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 90, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel7.setText("Name Of Sender");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 110, 20));
        jPanel3.add(receiver, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, 160, -1));
        jPanel3.add(sendamount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, 160, -1));
        jPanel3.add(receiveamount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 160, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel8.setText("Name Of Receiver");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 110, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel9.setText("Send Amount");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 110, 20));
        jPanel3.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, 160, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel10.setText("Receive Amount");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 110, 20));

        table1 = new javax.swing.JTable();
        table1 = new JTable()
        {
            public boolean isCellEditable(int row, int column)
            {
                for(int i=0;i<table1.getRowCount();i++)
                {
                    if(row ==i)
                    {
                        return false;
                    }
                }
                return true;
            }
        };
        table1.setBackground(new java.awt.Color(255, 204, 204));
        table1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table1.setFont(new java.awt.Font("Sitka Subheading", 1, 12)); // NOI18N
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table1);

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton5.setBackground(new java.awt.Color(153, 153, 255));
        jButton5.setFont(new java.awt.Font("Sitka Subheading", 3, 18)); // NOI18N
        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1197, 612));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // item buying validation
    public boolean a() {
        if (customer_name.getText().equals("")) {
            return false;
        }
        return true;
    }

    // item buying validation
    public boolean b() {
        if (ctrlnno.getText().equals("")) {
            return false;
        }
        return true;
    }

    // item buying validation
    public boolean c() {
        if (sender.getText().equals("")) {
            return false;
        }
        return true;
    }

    // item buying validation
    public boolean d() {
        if (receiver.getText().equals("")) {
            return false;
        }
        return true;
    }
      public static boolean isLeapYear(int year) {
        if (year % 100 == 0) {
            return year % 400 == 0;
        } else {
            return year % 4 == 0;
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!a()) {
            JOptionPane.showMessageDialog(null, "Please enter Party Name");
            return;
        }
        if (!b()) {
            JOptionPane.showMessageDialog(null, "Please enter Ctrl No ");
            return;
        }
        if (!c()) {
            JOptionPane.showMessageDialog(null, "Please enter Sender ");
            return;
        }
        if (!d()) {
            JOptionPane.showMessageDialog(null, "Please enter Receiver ");
            return;
        }
        
        //        converting nepali date to english
        String Date = date.getText();
        int pos1 = Date.indexOf("-");
        int pos2 = Date.indexOf("-", pos1 + 1);
        String year = Date.substring(0, pos1);
        String month = Date.substring(pos1 + 1, pos2);
        String day = Date.substring(pos2 + 1);
        int nepYear = Integer.parseInt(year);
        int nepMonth = Integer.parseInt(month);
        int nepDay = Integer.parseInt(day);
//        JOptionPane.showMessageDialog(null,year);
//        JOptionPane.showMessageDialog(null,month);
//        JOptionPane.showMessageDialog(null,day);
        initComponents();
        Map<Integer, int[]> nepaliMap = new HashMap<Integer, int[]>();

        nepaliMap.put(2000, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2001, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2002, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2003, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2004, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2005, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2006, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2007, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2008, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31});
        nepaliMap.put(2009, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2010, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2011, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2012, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30});
        nepaliMap.put(2013, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2014, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2015, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2016, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30});
        nepaliMap.put(2017, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2018, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2019, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2020, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2021, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2022, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30});
        nepaliMap.put(2023, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2024, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2025, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2026, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2027, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2028, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2029, new int[]{0, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2030, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2031, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2032, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2033, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2034, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2035, new int[]{0, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31});
        nepaliMap.put(2036, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2037, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2038, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2039, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30});
        nepaliMap.put(2040, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2041, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2042, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2043, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30});
        nepaliMap.put(2044, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2045, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2046, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2047, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2048, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2049, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30});
        nepaliMap.put(2050, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2051, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2052, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2053, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30});
        nepaliMap.put(2054, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2055, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2056, new int[]{0, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2057, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2058, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2059, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2060, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2061, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2062, new int[]{0, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31});
        nepaliMap.put(2063, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2064, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2065, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2066, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31});
        nepaliMap.put(2067, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2068, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2069, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2070, new int[]{0, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30});
        nepaliMap.put(2071, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2072, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2073, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31});
        nepaliMap.put(2074, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2075, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2076, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30});
        nepaliMap.put(2077, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31});
        nepaliMap.put(2078, new int[]{0, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2079, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30});
        nepaliMap.put(2080, new int[]{0, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30});
        nepaliMap.put(2081, new int[]{0, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2082, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2083, new int[]{0, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2084, new int[]{0, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2085, new int[]{0, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2086, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2087, new int[]{0, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2088, new int[]{0, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2089, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30});
        nepaliMap.put(2090, new int[]{0, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30});

        int startingNepYear = 2000;
        int startingNepMonth = 1;
        int startingNepDay = 1;
        int dayOfWeek = Calendar.WEDNESDAY; // 2000/1/1 is Wednesday
        int startingEngYear = 1943;
        int startingEngMonth = 4;
        int startingEngDay = 14;

        long totalNepDaysCount = 0;

// count total days in-terms of year
        for (int i = startingNepYear; i < nepYear; i++) {
            for (int j = 1; j <= 12; j++) {
                totalNepDaysCount += nepaliMap.get(i)[j];
            }
        }
//        JOptionPane.showMessageDialog(null,totalNepDaysCount);
// count total days in-terms of month
        for (int j = startingNepMonth; j < nepMonth; j++) {
            totalNepDaysCount += nepaliMap.get(nepYear)[j];
        }

// count total days in-terms of date
        totalNepDaysCount += nepDay - startingNepDay;

        int[] daysInMonth = new int[]{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int[] daysInMonthOfLeapYear = new int[]{0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        // calculation of equivalent english date...
        int engYear = startingEngYear;
        int engMonth = startingEngMonth;
        int engDay = startingEngDay;

        int endDayOfMonth = 0;

        while (totalNepDaysCount != 0) {
            if (isLeapYear(engYear)) {
                endDayOfMonth = daysInMonthOfLeapYear[engMonth];
            } else {
                endDayOfMonth = daysInMonth[engMonth];
            }
            engDay++;
            dayOfWeek++;
            if (engDay > endDayOfMonth) {
                engMonth++;
                engDay = 1;
                if (engMonth > 12) {
                    engYear++;
                    engMonth = 1;
                }
            }
            if (dayOfWeek > 7) {
                dayOfWeek = 1;
            }
            totalNepDaysCount--;
        }
        String newDate = engYear + "-" + engMonth + "-" + engDay;
//        jTextField4.setText(newDate);

        //checking party if exists
        String pname = customer_name.getText();
        String ssqqll = "select * from remitparty where party_name ='" + pname + "'";

        try {
            pst = conn.prepareStatement(ssqqll);
            rs = pst.executeQuery(ssqqll);
            if (rs.next() == true) {
                
                 String sql111 = "insert into remittance(party_name,ctrl_no,sender_name,receiver_name,send_amount,receive_amount,date) values(?,?,?,?,?,?,?)";
                    try {
                        pst = conn.prepareStatement(sql111);
                        pst.setString(1, customer_name.getText());
                        pst.setString(2, ctrlnno.getText());
                        pst.setString(3, sender.getText());
                        pst.setString(4, receiver.getText());
                        if (sendamount.getText().equals("")) {
                            pst.setDouble(5, Double.parseDouble("0.0"));
                        } else {
                            pst.setDouble(5, Double.parseDouble(sendamount.getText()));
                        }
                        if (receiveamount.getText().equals("")) {
                            pst.setDouble(6, Double.parseDouble("0.0"));
                        } else {
                            pst.setDouble(6, Double.parseDouble(receiveamount.getText()));
                        }
                        pst.setString(7, newDate);
                        pst.execute();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                
                String p = customer_name.getText();
                String s = "select * from remitparty where party_name ='" + p + "'";
                try {
                    //updating remitparty total sent and totalreceive value                
                    pst = conn.prepareStatement(s);
                    rs = pst.executeQuery(s);
                    while (rs.next()) {
                        int oldtotalsent = rs.getInt("totalsent");
                        int oldtotalreceive = rs.getInt("totalreceive");
                        int sentamount,receivedamount;
                        if (sendamount.getText().equals("")) {
                            sentamount = 0;
                        } else {
                            sentamount = Integer.parseInt(sendamount.getText());
                        }
                         if (receiveamount.getText().equals("")) {
                            receivedamount = 0;
                        } else {
                            receivedamount = Integer.parseInt(receiveamount.getText());
                        }

                        int newtotalsent = oldtotalsent + sentamount;
                        int newtotalreceive = oldtotalreceive + receivedamount;
                        int total =  newtotalreceive - newtotalsent;
                        String sqlll = "update remitparty set   " + " totalsent= '" + newtotalsent + "'" + " ,  " + " totalreceive= '" + newtotalreceive + "'" + "   where party_name = '" + pname + "'";                
                        try {
                            pst = conn.prepareStatement(sqlll);
                            pst.execute();
                            fetch();
                            clear();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        String sqlll1 = "update remitparty set   " + " total= '" + total + "'" + " " + "   where party_name = '" + pname + "'";
                        try {
                            pst = conn.prepareStatement(sqlll1);
                            pst.execute();
                            JOptionPane.showMessageDialog(null, "Remittance added succesfully");
                            fetch();
                            clear();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                //new party case
                // new party 
                String sql = "insert into remittance(party_name,ctrl_no,sender_name,receiver_name,send_amount,receive_amount,date) values(?,?,?,?,?,?,?)";
                try {
                    pst = conn.prepareStatement(sql);
                    pst.setString(1, customer_name.getText());
                    pst.setString(2, ctrlnno.getText());
                    pst.setString(3, sender.getText());
                    pst.setString(4, receiver.getText());
                    if (sendamount.getText().equals("")) {
                        pst.setDouble(5, Double.parseDouble("0.0"));
                    } else {
                        pst.setDouble(5, Double.parseDouble(sendamount.getText()));
                    }
                    if (receiveamount.getText().equals("")) {
                        pst.setDouble(6, Double.parseDouble("0.0"));
                    } else {
                        pst.setDouble(6, Double.parseDouble(receiveamount.getText()));
                    }
                    pst.setString(7, newDate);
                    pst.execute();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }

                String sql1 = "insert into remitparty(party_name,ctrl_no,totalsent,totalreceive,total) values(?,?,?,?,?)";
                try {
                    pst = conn.prepareStatement(sql1);
                    pst.setString(1, customer_name.getText());
                    pst.setString(2, ctrlnno.getText());
                    if (sendamount.getText().equals("")) {
                        pst.setDouble(3, Double.parseDouble("0.0"));
                    } else {
                        pst.setDouble(3, Double.parseDouble(sendamount.getText()));
                    }
                    if (receiveamount.getText().equals("")) {
                        pst.setDouble(4, Double.parseDouble("0.0"));
                    } else {
                        pst.setDouble(4, Double.parseDouble(receiveamount.getText()));
                    }
                     if (sendamount.getText().equals("")) {
                        pst.setDouble(5, Double.parseDouble(receiveamount.getText()));
                    } else {
                        pst.setDouble(5, Double.parseDouble(sendamount.getText()));
                    }
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Remittance added succesfully");
                    fetch();
                    clear();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
                
            }
//            JOptionPane.showMessageDialog(null,rs.getString("count(age)"));
//            if (rs.next() == false) {
//                // new party 
//                String sql = "insert into remittance(party_name,ctrl_no,sender_name,receiver_name,send_amount,receive_amount,date) values(?,?,?,?,?,?,?)";
//                try {
//                    pst = conn.prepareStatement(sql);
//                    pst.setString(1, customer_name.getText());
//                    pst.setString(2, ctrlnno.getText());
//                    pst.setString(3, sender.getText());
//                    pst.setString(4, receiver.getText());
//                    if (sendamount.getText().equals("")) {
//                        pst.setDouble(5, Double.parseDouble("0.0"));
//                    } else {
//                        pst.setDouble(5, Double.parseDouble(sendamount.getText()));
//                    }
//                    if (receiveamount.getText().equals("")) {
//                        pst.setDouble(6, Double.parseDouble("0.0"));
//                    } else {
//                        pst.setDouble(6, Double.parseDouble(receiveamount.getText()));
//                    }
//                    pst.setString(7, date.getText());
//                    pst.execute();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, e);
//                }
//
//                String sql1 = "insert into remitparty(party_name,ctrl_no,totalsent,totalreceive) values(?,?,?,?)";
//                try {
//                    pst = conn.prepareStatement(sql1);
//                    pst.setString(1, customer_name.getText());
//                    pst.setString(2, ctrlnno.getText());
//                    if (sendamount.getText().equals("")) {
//                        pst.setDouble(3, Double.parseDouble("0.0"));
//                    } else {
//                        pst.setDouble(3, Double.parseDouble(sendamount.getText()));
//                    }
//                    if (receiveamount.getText().equals("")) {
//                        pst.setDouble(4, Double.parseDouble("0.0"));
//                    } else {
//                        pst.setDouble(4, Double.parseDouble(receiveamount.getText()));
//                    }
//                    pst.execute();
//                    JOptionPane.showMessageDialog(null, "Remittance added succesfully");
//                    fetch();
//                    clear();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, e);
//                }
//            } //old party exists then 
//            else {
//                do {
//                    String sql111 = "insert into remittance(party_name,ctrl_no,sender_name,receiver_name,send_amount,receive_amount,date) values(?,?,?,?,?,?,?)";
//                    try {
//                        pst = conn.prepareStatement(sql111);
//                        pst.setString(1, customer_name.getText());
//                        pst.setString(2, ctrlnno.getText());
//                        pst.setString(3, sender.getText());
//                        pst.setString(4, receiver.getText());
//                        if (sendamount.getText().equals("")) {
//                            pst.setDouble(5, Double.parseDouble("0.0"));
//                        } else {
//                            pst.setDouble(5, Double.parseDouble(sendamount.getText()));
//                        }
//                        if (receiveamount.getText().equals("")) {
//                            pst.setDouble(6, Double.parseDouble("0.0"));
//                        } else {
//                            pst.setDouble(6, Double.parseDouble(receiveamount.getText()));
//                        }
//                        pst.setString(7, date.getText());
//                        pst.execute();
////                    JOptionPane.showMessageDialog(null, "Remittance Added");
//
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(null, e);
//                    }
//
//                    
//                } while (rs.next());
//            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

//        String sql222 = "select SUM(send_amount) as sum from remittance where date='" + date.getText() + "' ORDER BY id DESC";
//        try {
//            pst = conn.prepareStatement(sql222);
//            rs = pst.executeQuery(sql222);
//            while (rs.next()) {
//                Double b = Double.parseDouble(rs.getString("sum"));
//                String newssql = "update remittance set "
//                        + "totalsent= '" + b + "'"
//                        + "where date='" + date.getText() + "'";
//                try {
//                    pst = conn.prepareStatement(newssql);
//                    pst.execute();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, e);
//                }
//            }
//
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//
//        String sql2222 = "select SUM(receive_amount) as summ from remittance where date='" + date.getText() + "' ORDER BY id DESC";
//        try {
//            pst = conn.prepareStatement(sql2222);
//            rs = pst.executeQuery(sql2222);
//            while (rs.next()) {
//                Double a = Double.parseDouble(rs.getString("summ"));
//                String newssql = "update remittance set "
//                        + "totalreceive= '" + a + "'"
//                        + "where date='" + date.getText() + "'";
//                try {
//                    pst = conn.prepareStatement(newssql);
//                    pst.execute();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, e);
//                }
//            }
//
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//        fetch();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void customer_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customer_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customer_nameActionPerformed

    private void customer_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customer_nameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_customer_nameKeyTyped

    private void ctrlnnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlnnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctrlnnoActionPerformed

    private void table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table1MouseClicked
        // TODO add your handling code here:
         if (evt.getClickCount() == 2) {
            TableModel model1 = table1.getModel();
            int indexs[] = table1.getSelectedRows();
            Object[] row = new Object[6];
            RemittanceDetail td = new RemittanceDetail();
            DefaultTableModel model2 = (DefaultTableModel) td.table1.getModel();
            for (int i = 0; i < indexs.length; i++) {
                row[0] = model1.getValueAt(indexs[i], 0);
                row[1] = model1.getValueAt(indexs[i], 1);
                row[2] = model1.getValueAt(indexs[i], 2);
                row[3] = model1.getValueAt(indexs[i], 3);
                model2.addRow(row);
            }
            td.setVisible(true);
    }  
    }//GEN-LAST:event_table1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void search_textKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_textKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_textKeyPressed

    private void search_textKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_textKeyReleased
        // TODO add your handling code here:
        String query = search_text.getText();
        filter(query);
    }//GEN-LAST:event_search_textKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bank().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ctrlnno;
    private javax.swing.JTextField customer_name;
    private javax.swing.JTextField date;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField receiveamount;
    private javax.swing.JTextField receiver;
    private javax.swing.JTextField search_text;
    private javax.swing.JTextField sendamount;
    private javax.swing.JTextField sender;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}
